# -*- coding: utf-8 -*-
"""
Created on Tue Feb 18 12:46:23 2025

@author: HP
"""

import cv2
import numpy as np
import os
import sys
import threading
from pynput import keyboard

# Dossier de sauvegarde des scans
SAVE_FOLDER = "scans"
os.makedirs(SAVE_FOLDER, exist_ok=True)

# D√©tection automatique de la cam√©ra
def detect_camera():
    for i in range(5):  # Tester plusieurs indices
        cap = cv2.VideoCapture(i, cv2.CAP_DSHOW)  # Utiliser DSHOW pour r√©duire la latence
        if cap.isOpened():
            print(f"‚úÖ Cam√©ra d√©tect√©e sur l‚Äôindex {i}")
            return cap
    print("‚ùå Aucune cam√©ra d√©tect√©e.")
    return None

# Ajuster les propri√©t√©s de la cam√©ra
def set_camera_properties(cap):
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 3072)  # R√©solution large
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 1728)
    cap.set(cv2.CAP_PROP_BRIGHTNESS, 0.5)  # Luminosit√©
    cap.set(cv2.CAP_PROP_CONTRAST, 0.5)    # Contraste
    cap.set(cv2.CAP_PROP_SATURATION, 0.5)  # Saturation

# Traitement d‚Äôimage (mise au propre)
def process_image(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)  # Niveaux de gris
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)  # R√©duction du bruit
    sharpened = cv2.addWeighted(gray, 1.5, blurred, -0.5, 0)  # Am√©lioration de la nettet√©
    edged = cv2.Canny(sharpened, 50, 150)  # D√©tection des contours
    return edged

# Capture et enregistrement
def capture_and_process(cap):
    ret, frame = cap.read()
    if ret:
        #processed_image = process_image(frame)
        filename = os.path.join(SAVE_FOLDER, f"scan_{cv2.getTickCount()}.jpg")
        cv2.imwrite(filename, frame)
        print(f"‚úÖ Image enregistr√©e : {filename}")

# Gestion de la capture √† la pression d'une touche
def on_press(key, cap):
    if key == keyboard.Key.space:  # Modifier si la p√©dale envoie une autre touche
        print("üì∏ Capture en cours...")
        capture_and_process(cap)

# Fonction de pr√©visualisation
def preview_camera(cap):
    while True:
        ret, frame = cap.read()
        if ret:
            cv2.imshow('Preview', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cv2.destroyAllWindows()
    sys.exit()
    

# D√©tection de la cam√©ra
cap = detect_camera()
if cap is None:
    sys.exit()
 
# Ajuster les propri√©t√©s de la cam√©ra
set_camera_properties(cap)

# Lancer la pr√©visualisation dans un thread s√©par√©
preview_thread = threading.Thread(target=preview_camera, args=(cap,))
preview_thread.daemon = True
preview_thread.start()

# Lancement de l'√©couteur de touche
print("üöÄ Pr√™t ! Appuie sur la p√©dale (ou espace) pour capturer un scan.")
listener = keyboard.Listener(on_press=lambda key: on_press(key, cap))
listener.start()
listener.join()
  